#!/usr/bin/env python

"""Author: Capt Josef Peterson
(2009) All Rights Reserved

Version: 0.5.1

Purpose:  Identify and report common errors in Air Force performance reports.

Tested with:  	AF707, 2008/06/18, ver 2.79.9
              	AF910, 2006/12/01, ver 8.113.5

Known Issues:

-Will not open IE with Adobe Acrobat if current PR output file is already open
-Does not include checking for words that need hyphens or vice versa
-Does not identify the field or line where spelling errors are found
-Does not check for the correct form version and exit gracefully
-Does not check for valid abbreviations and acronyms
-Fails duty title containing "ERS CC"

Nice To Haves:
-Explanations for check fails
-PRF Checking

Static Files:
-PR Structure.ods: Contains regex and check suite information for PRs
-Text2PDF.exe (Windows) or Text2PDF (Linux): Converts raw text output to PDFs (Thanks to Anand B Pillai)
-setup.py: Configuration information for py2exe
-uudeview.exe (Windows) or uudeview (Linux): Converts .XFDL file to gzipped XML
-prchecker_splash.gif: Image for the splash
-others (may be included with py2exe distribution)

Dynamic Files:
-logfile.txt: Containes stdout feed
-logfileerr.txt: Containes stderr feed
-output.pdf: Contains the output from the PR Checker
"""

import sys 
#sys.stdout = open("logfile.txt","w") 
#sys.stderr = open("logfileerr.txt", "w")
import os
import xml.dom.minidom
import re
import gzip, zipfile
from tkFileDialog import askopenfilename  
try:
    import win32gui
    import win32com.client
except:
    pass  
import optparse
import Tkinter

class pr_object:
    
    def __init__(self, pr_filename, settings_filename):
        #Initialize Spell Checker
        if os.name == 'nt':
            self.spell_checker = msword_spell_check()
            print "Spell Checker Initialized"

        #Initialize Output File
        self.output_filename = "%s%s%s.out" % (os.getcwd(), os.path.sep, os.path.basename(pr_filename))
        program_string = """=====PR Checker=====\n\n"""
        author_string = """Author: Capt Josef Peterson\n(2009) All Rights Reserved\n\n"""
        file_name_string = """Checking File: %s\n\n""" % os.path.basename(pr_filename)
        self.output = open(self.output_filename, 'w', -1)
        self.output.write(program_string)
        self.output.write(author_string)
        self.output.write(file_name_string)
           
        #Load PR and list of settings
        print "Converting XFDL to XML..."
        
        #Load PR into parsed XML document
        if os.name == 'posix':
            os.system("""uudeview -i "%s" """ % pr_filename)
        else:
            os.system("""%s%suudeview -i "%s" """ % (os.getcwd(), os.path.sep, pr_filename))
        zipped_file = '%s%sUNKNOWN.001'% (os.getcwd(), os.path.sep)
        try:
            zip_data = gzip.GzipFile(zipped_file,'r')
            self.doc = xml.dom.minidom.parse(zip_data)
        except:
            print "Cannot convert file.  It may be an outdated PR version.  Contact your administrator."
            os._exit()
        zip_data.close()
        os.remove(zipped_file)

        #Store globalpage, page 1 & page 2 in attributes
        self.globalpage = self.doc.getElementsByTagName('globalpage')[0]
        pages = self.doc.getElementsByTagName('page')
        self.page1 = pages[0]
        self.page2 = pages[1]

        #Determine and write PR type
        pr_types = {'Officer':'OPR','ENLISTED':'EPR'}
        self.pr_type = self.get_text(self.globalpage.getElementsByTagName('title')[0])
        self.output.write("Type: ")
        self.output.write(self.pr_type)
        self.output.write("\n\n")

        for pr_type in pr_types:
             p = re.compile(pr_type)
             if p.search(self.pr_type):
                 self.pr_type = pr_types[pr_type]

        #Load settings into parsed XML document
        OD_TABLE_NS = 'urn:oasis:names:tc:opendocument:xmlns:table:1.0'
        zip_data = zipfile.ZipFile(settings_filename)
        content = zip_data.read('content.xml')
        self.settings = xml.dom.minidom.parseString(content)
        zip_data.close()

        #Load REGEX checks into dictionaries
        sheet_list = self.settings.getElementsByTagNameNS(OD_TABLE_NS, 'table')

        fields_str = "%s Fields" % self.pr_type
        checks_str = "%s Checks" % self.pr_type
        popups_str = "%s Popups" % self.pr_type

        for sheet in sheet_list:
            sheet_name = sheet.getAttributeNS(OD_TABLE_NS, 'name')
            sheet_rows = sheet.getElementsByTagNameNS(OD_TABLE_NS, 'table-row')     

            if sheet_name == fields_str:
                 field_dict_p1, field_dict_p2 = self.get_cells(sheet_rows, OD_TABLE_NS)

            if sheet_name == checks_str:
                 checks_dict_p1, checks_dict_p2 = self.get_cells(sheet_rows, OD_TABLE_NS)

            if sheet_name == popups_str:
                 popups_dict_p1, popups_dict_p2 = self.get_cells(sheet_rows, OD_TABLE_NS)

            if sheet_name == "Senior Rater Info":
                SR_dict = {} 
                for row in sheet_rows:
                    cells = row.getElementsByTagNameNS(OD_TABLE_NS, 'table-cell')
                    SR_dict[self.get_text(cells[1])] = (self.get_text(cells[0]), self.get_text(cells[2]))
       
        #Print the contents of the dictionaries if the verbose option is set              
        if options.verbose:
  
            self.print_dict(field_dict_p1, "Page 1 Field Dictionary")
            self.print_dict(field_dict_p2, "Page 2 Field Dictionary")

            self.print_dict(checks_dict_p1, "Page 1 Check Box Dictionary")
            self.print_dict(checks_dict_p2, "Page 2 Check Box Dictionary")

            self.print_dict(popups_dict_p1, "Page 1 Popups Dictionary")
            self.print_dict(popups_dict_p2, "Page 2 Popups Dictionary")
 
            self.print_dict(SR_dict, "Senior Rater Info")

        #Start program main function
        self.main(field_dict_p1, field_dict_p2, checks_dict_p1, checks_dict_p2, \
                  popups_dict_p1, popups_dict_p2)

    def get_cells(self, sheet_rows, OD_TABLE_NS):
        #Pull the fields off of the front and back of the PR and put in dictionary.
        dict_p1 = {}
        dict_p2 = {}

        for row in sheet_rows:
            cells = row.getElementsByTagNameNS(OD_TABLE_NS, 'table-cell')
            try:
                if self.get_text(cells[4]) == "1":         
                    dict_p1[self.get_text(cells[1])] = (self.get_text(cells[0]), \
                                                        self.get_text(cells[2]), \
                                                        self.get_text(cells[3]), \
                                                        self.get_text(cells[4]), \
                                                        self.get_text(cells[5]) \
                                                       )
                elif self.get_text(cells[4]) == "2":
                    dict_p2[self.get_text(cells[1])] = (self.get_text(cells[0]), \
                                                        self.get_text(cells[2]), \
                                                        self.get_text(cells[3]), \
                                                        self.get_text(cells[4]), \
                                                        self.get_text(cells[5]) \
                                                       )
            except:
                pass

        return dict_p1, dict_p2

    def get_text(self, node):
        #Pull text out of one XML node
        text = ''
        for child in node.childNodes:
            if child.nodeType == child.ELEMENT_NODE:
                text = text+self.get_text(child)
            elif child.nodeType == child.TEXT_NODE:
                text = text+child.nodeValue
        return text.encode('ascii')
    
    def get_on_form_dicts(self, form_field, xmldoc):
        #Return a dictionary with all keys & items from elements matching the string form_field 
        #from an XML document
        xmllist = xmldoc.getElementsByTagName(form_field)
        value_dict = {}

        for i in xmllist:
            j = i.getElementsByTagName('value')
            try:
                value_dict[j[0].parentNode.getAttribute('sid')] = j[0].firstChild.nodeValue
            except:
                value_dict[j[0].parentNode.getAttribute('sid')] = ""

        return value_dict

    def print_dict(self, the_dict, name):
        #Print the keys and items in an arbitrary dictionary.
        if the_dict and name:
            print name
            self.output.write(name)
            self.output.write("\n")
            for i in the_dict:
                print i, the_dict[i]
                self.output.write(i)
                self.output.write(" ")
                self.output.write(repr(the_dict[i]))
                self.output.write("\n")
            self.output.write("\n")        
    
    def regex_check(self, IUT_dict, truth_dict):
       #Check in incoming dictionary against regular expressions in a truth dictionary
       if len(IUT_dict) == 0:
           return

       print "Running Regular Expression Check...\n"

       for i in IUT_dict:
             try:
                 if truth_dict[i][2] != 'None':
                     pattern = re.compile(truth_dict[i][2])
                     try:
                         match = pattern.match(IUT_dict[i]).group()
                         if options.verbose:
                             out_string = "%s => [OK]\nField: %s Text: %s\n" % (truth_dict[i][0], i, match)
                             print out_string
                             self.output.write(out_string)
                             self.output.write("\n")
                     except:
                         out_string = "%s => [FAIL]\nField: %s Text: %s\n" % (truth_dict[i][0],\
                                      i, IUT_dict[i].encode('unicode_escape'))
                         print out_string
                         self.output.write(out_string)
                         self.output.write("\n")
                         self.fails += 1
             except KeyError:
                 pass

    def spell_check(self, on_form_dict, check_dict):

        print "Running Spell Check..."

        for item in on_form_dict:
            try:
                spell_item = check_dict[item][4]
                if spell_item == 'Y':
                    self.output.write(self.spell_checker(on_form_dict[item]))
            except KeyError:
                pass

    #def hyphen_check
    #def no_hyphen_check
    #def sig_block_check
    #def get_hyphen_words
    #def get_non_hyphen_words
    #def get_acros_and_abbrevs

    def test_group(self, check_tuple, check_type):
        #Test the form's front and back page against truth dictionaries
        p1_on_form = self.get_on_form_dicts(check_type, self.page1)
        p2_on_form = self.get_on_form_dicts(check_type, self.page2)
        
        on_form = (p1_on_form, p2_on_form)       

        #Spell Check Applicable Fields & Check The Pages Against Regular Expressions
        for i in range(2):
            if os.name == 'nt':
                self.spell_check(on_form[i], check_tuple[i])
            self.regex_check(on_form[i], check_tuple[i])
    
    def main(self, *args):

        print "\n*****************START PR ANALYSIS*******************\n"
 
        self.fails = 0

        self.test_group((args[0], args[1]), 'field')
        self.test_group((args[2], args[3]), 'check')
        self.test_group((args[4], args[5]), 'popup')
        
        #Use proper grammar :)
        if self.fails == 1 or self.fails == 0:
            are_or_is = 'is'
        else:
            are_or_is = 'are'

        output_string = "***There %s %d failed field(s) in this PR***" % (are_or_is, self.fails)
        print output_string
        self.output.write(output_string)

        self.output.close()

        os.system('%s%sText2PDF "%s"' % (os.getcwd(), os.path.sep, self.output_filename))
        os.remove(self.output_filename)

        if os.name == 'posix':
            try:
                os.system('evince "%s.pdf"' % self.output_filename)
            except:
                pass
        else:
            ie = win32com.client.Dispatch("internetexplorer.application")
            ie.visible = 1
            ie.Navigate('%s.pdf' % self.output_filename)

#****************SPELL CHECKER CLASSES*****************************

class msword_spell_check:
    def __init__(self):
        self.msword = win32com.client.Dispatch("Word.Application")
        self.msword.Documents.Add()
    def __call__(self, string):
        output = ""
        for word in string.split():
            if self.msword.CheckSpelling(word):
                if options.verbose:
                    out_string = "!%s! OK!" % word
                    print out_string
                    output += out_string + "\n"
            else:
                out_string = "?%s? ->" % word
                print out_string
                output += out_string
                output += "\n"
                suggestions = self.msword.GetSpellingSuggestions(word)
                for suggest in suggestions:
                    out_string = suggest.Name
                    print out_string
                    output += out_string
                    output += "\n"
        
        output += "\n"
        return output

#***********************GUI CLASSES********************************

class splash_image:

    def button_click_exit_mainloop (self,event):
        event.widget.quit() # this will cause mainloop to unblock.
    
    def __init__(self):
        root = Tkinter.Tk()
        gif = Tkinter.PhotoImage(file='prchecker_splash.gif')
        img = Tkinter.Label()
        img.pack()
        img.config(image = gif)
        button = Tkinter.Button(text = "Process Performance Report")
        button.pack()
        root.bind("<Button>", self.button_click_exit_mainloop)
        centerx = (root.winfo_screenwidth() - gif.width()) / 2
        centery = (root.winfo_screenheight() - gif.height()) / 2
        dimensions = (gif.width(), gif.height() + 30, centerx, centery)
        root.geometry('%dx%d+%d+%d' % dimensions)
        root.overrideredirect(1)
        root.tkraise()
        root.mainloop()

#***********************START MAIN PROGRAM*************************
       
def find_file(title):
    if os.name == 'posix':    
        var = askopenfilename()
    elif os.name == 'nt':   
        var = win32gui.GetOpenFileNameW(Title = title)[0]
    else:
        print "Error: Couldn't Identify OS.  Consult Your Administrator"
        exit(0)
    return var
    
def usage():
    print "Usage: prchecker [options] filename"

if __name__ == "__main__":
    #Set up a couple of admin things to deal with windows' baloney
    working_dir = os.getcwd()

    splash_image()

    #Deal with arguments, options and incorrect usage
    p = optparse.OptionParser()
    p.add_option('--verbose', '-v', action = 'store_true')
    options, arguments = p.parse_args()
    if len(arguments)==0:
        pr_file = ""
        while os.path.splitext(pr_file)[1]!= '.xfdl':
            print "Please select input PR."        
            pr_file = find_file("Select Input PR")
            os.chdir(working_dir)
    elif len(arguments) > 1:
        usage()

    #Set up the input arguments for the PR Checker class
    else:
        pr_file = """%s%s%s""" % (os.getcwd(), os.path.sep, arguments[0])
    settings_file = """%s%sPR Structure.ods""" % (os.getcwd(), os.path.sep)    
    if not os.path.exists("""%s%sPR Structure.ods""" % (os.getcwd(), os.path.sep)):
        print "PR Structure.ods is missing.  Please find PR Structure.ods to continue."
        settings_file = ""
        while os.path.splitext(settings_file)[1]!= '.ods':
            print "Please select settings file."        
            settings_file = find_file("Select Settings File (PR Structure.ods)")
            os.chdir(working_dir)

    pr_file = os.path.abspath(pr_file)

    #Run the program, finally
    print "Analyzing PR..."
    pr = pr_object(pr_file, settings_file)
    
    #Clean up logfiles
    sys.stdout.close()
    sys.stderr.close()


#**********************NOTES AND EXTRAS***************************

"""class ispell:
    def __init__(self):
        self._f = popen2.Popen3("ispell -a")
        self._f.fromchild.readline() #skip the credit line
    def __call__(self, word):
        self._f.tochild.write(word+'\n')
        self._f.tochild.flush()
        s = self._f.fromchild.readline()
        if not (s[:1]=="*" or s[:1]=="+" or s[:1]=="-" or s[:1]=="#" or s[:1]=="?" or s[:1]=="&amp;"):
            return None
        #s = self._f.fromchild.readline()
        if s[:1]=="*" or s[:1]=="+" or s[:1]=="-":     #correct spelling
            return None
        elif s[:1]=="#":  # no matches
            return []
        else:
            m = re.compile("^[&amp;\?] \w+ [0-9]+ [0-9]+:([\w\- ,]+)$", re.M).search("\n"+s, 1)
            return (m.group(1).split(', '))
"""

"""***Find Double Words***
p = re.compile(r'(\b\w+)\s+\1')
p.search('Paris in the the spring').group()
'the the'
"""


